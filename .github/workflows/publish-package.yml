name: Publish Package

on:
  push:
    branches:
      - main
      - master
      - next
      - beta
      - "*.x" # maintenance releases branches

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Initialize package.json if not exists
      run: |
        if [ ! -f package.json ]; then
          npm init -y
          npm i --package-lock-only
        fi
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install Node dependencies
      run: npm install

    - name: Generate production code
      run: |
        if npm run --silent | grep -q "prod"; then
          npm run prod
        else
          echo "No 'prod' script found in package.json, skipping production build"
        fi

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2
        extensions: mbstring, pdo, pdo_mysql

    - name: Configure Nova
      run: composer config http-basic.nova.laravel.com "${{ secrets.NOVA_USERNAME }}" "${{ secrets.NOVA_LICENSE_KEY }}"

    - name: Install PHP dependencies
      run: composer install --prefer-dist --no-progress --no-suggest
        
    - name: Run tests
      run: |
        if [ -f "./vendor/bin/phpunit" ]; then
          ./vendor/bin/phpunit tests
        else
          echo "PHPUnit not found in vendor/bin, skipping tests"
        fi

  release:
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Initialize package.json if not exists
        run: |
          if [ ! -f package.json ]; then
            npm init -y
            npm i --package-lock-only
          fi
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github
          
      - name: Update composer.json version
        run: |
          # Get the next version from conventionals commits
          NEXT_VERSION=$(npx semantic-release --dry-run | grep "next release version" | awk '{print $NF}')
          if [ ! -z "$NEXT_VERSION" ]; then
            echo "Updating version to: $NEXT_VERSION"
            
            # Update version in composer.json
            jq --arg version "$NEXT_VERSION" '.version = $version' composer.json > tmp.json
            mv tmp.json composer.json
            
            # Commit and tag
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add composer.json
            git commit -m "chore: bump version to $NEXT_VERSION" || exit 0
            git tag "v$NEXT_VERSION"
            git push origin main --tags
          fi

  update-develop:
    needs: [release]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}
          
      - name: Merge main to develop
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout develop
          git merge main --no-ff -m "chore: merge main into develop"
          
          CURRENT_VERSION=$(git describe --tags --abbrev=0 | sed 's/v//')
          DEV_VERSION="${CURRENT_VERSION}"
          
          jq --arg version "$DEV_VERSION" '.version = $version' composer.json > tmp.json
          mv tmp.json composer.json
          
          git add composer.json
          git commit -m "chore: update develop version to $DEV_VERSION" || exit 0
          git push origin develop

  publish:
    needs: [release]
    runs-on: ubuntu-latest

    steps:
      - name: Notify Packagist (curl)
        run: |
          curl -XPOST -H'content-type:application/json' \
          "https://packagist.org/api/update-package?username=${{ secrets.PACKAGIST_USERNAME }}&apiToken=${{ secrets.PACKAGIST_TOKEN }}" \
          -d'{"repository":{"url":"https://github.com/${{ github.repository }}"}}'